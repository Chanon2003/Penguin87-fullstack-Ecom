import { prisma } from '../lib/prisma.js'

import Stripe from 'stripe';
const stripe = Stripe(process.env.STRIPE_SECRET_KEY)

import dotenv from 'dotenv';

dotenv.config();

export const cashOnDeliveryOrderController = async (req, res) => {
  try {
    const userId = req.user.id;
    const { list_items, addressId,totalAmt } = req.body;

    // 1Ô∏è‚É£ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏≠‡∏°‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const productIds = list_items.map((item) => item.productId);
    const productsFromDB = await prisma.product.findMany({
      where: { id: { in: productIds } },
      select: { id: true, price: true, discount_show: true, stock: true },
    });

    // 2Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ productId ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const productMap = new Map(productsFromDB.map((p) => [p.id, p]));
    const validatedItems = list_items.map((el) => {
      const product = productMap.get(el.productId);
      if (!product) {
        throw new Error(`‚ùå Product not found: ${el.product.name}`);
      }

      // 3Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
      if (product.stock < el.quantity) {
        throw new Error(`‚ùå Not enough stock for product: ${el.product.name}`);
      }


      // 4Ô∏è‚É£ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ discount_show ‡πÅ‡∏ó‡∏ô discount
      const priceAtOrder = product.price;
      const discount = product.discount_show; // ‡πÉ‡∏ä‡πâ discount_show ‡πÅ‡∏ó‡∏ô discount
      const discountAmount = discount == 0 ? 0 : (priceAtOrder * (discount / 100));

      const discountAtOrder = discount == 0 ? priceAtOrder : priceAtOrder * (discount / 100)

      const subTotalAmt = (priceAtOrder - discountAmount) * el.quantity; // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
      
      return {
        productId: product.id,
        quantity: el.quantity,
        priceAtOrder, // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏ì ‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        discountAtOrder, // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î ‡∏ì ‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        subTotalAmt,
        discount,
      };
    });

    // 5Ô∏è‚É£ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì totalAmt ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏Ñ‡∏≤
    const totalAmt1 = validatedItems.reduce((sum, item) => sum + item.subTotalAmt, 0);
   
    if(totalAmt!==totalAmt1){
      throw new Error(`‚ùå ‡∏°‡∏∂‡∏á ‡πÅ‡∏≠‡∏ö‡πÇ‡∏Å‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡∏´‡∏ô‡∏¥ ‡∏•‡∏≠‡∏á Refresh ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÉ‡∏´‡∏°‡πà`)
    }

    // 6Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
    const order = await prisma.order.create({
      data: {
        userId,
        payment_status: "Pay By Cash",
        delivery_address: addressId,
        totalAmt:totalAmt1,
      },
    });

    // 7Ô∏è‚É£ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
    const productOnOrderData = validatedItems.map((el) => {
      const price = el.priceAtOrder;  // ‡πÉ‡∏ä‡πâ priceAtOrder ‡πÅ‡∏ó‡∏ô price
      return {
        orderId: order.id,
        productId: el.productId,
        quantity: el.quantity,
        discount:el.discount,
        priceAtOrder: el.priceAtOrder,  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏ì ‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        discountAtOrder: el.discountAtOrder,  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î ‡∏ì ‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        subTotalAmt: el.subTotalAmt,
        price,  // ‡πÄ‡∏û‡∏¥‡πà‡∏° price ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
      };
    });

    await prisma.productOnOrder.createMany({
      data: productOnOrderData,
    });

    // 8Ô∏è‚É£ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await prisma.$transaction(
      validatedItems.map((el) =>
        prisma.product.update({
          where: { id: el.productId },
          data: {
            stock: { decrement: el.quantity },
            sold: { increment: el.quantity },
          },
        })
      )
    );
    
    // 9Ô∏è‚É£ ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    await prisma.cartProduct.deleteMany({ where: { userId } });

    // üîü ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ shopping_cart ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    await prisma.user.update({
      where: { id: userId },
      data: { shopping_cart: { set: [] } },
    });

    return res.json({
      message: "‚úÖ Order Successfully",
      error: false,
      success: true,
      data: productOnOrderData,
    });
  } catch (error) {
    console.error("‚ùå Error in cashOnDeliveryOrderController:", error);
    return res.status(500).json({
      message: error.message || error,
      error: true,
      success: false,
    });
  }
};

export const paymentOrderController = async (req, res) => {  
  try {     
    const userId = req.user.id;     
    const { list_items, addressId, payment,totalAmt } = req.body;  

    // 0 ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô    
    if (!payment || payment.status !== "succeeded") {       
      throw new Error('‚ùå Payment failed or not completed.');     
    }     

    // 1Ô∏è‚É£ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏≠‡∏°‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•     
    const productIds = list_items.map((item) => item.productId);     
    const productsFromDB = await prisma.product.findMany({       
      where: { id: { in: productIds } },       
      select: { id: true, price: true, discount_show: true, stock: true },     
    });  

    // 2Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ productId ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•     
    const productMap = new Map(productsFromDB.map((p) => [p.id, p]));     
    const validatedItems = list_items.map((el) => {       
      const product = productMap.get(el.productId);       
      if (!product) {         
        throw new Error(`‚ùå Product not found: ${el.product.name}`);       
      }        

      // 3Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠       
      if (product.stock < el.quantity) {         
        throw new Error(`‚ùå Not enough stock for product: ${el.product.name}`);       
      }        

      const priceAtOrder = product.price;
      // console.log('priceAtOrder',priceAtOrder)
      const discount = product.discount_show; // ‡πÉ‡∏ä‡πâ discount_show ‡πÅ‡∏ó‡∏ô discount
      // console.log('discount',discount)
      const discountAmount = discount == 0 ? 0 : (priceAtOrder * (discount / 100));
      // console.log('discountAmount',discountAmount)
      const discountAtOrder = discount == 0 ? priceAtOrder : priceAtOrder * (discount / 100)
      // console.log('discountAtOrder',discountAtOrder)
      const subTotalAmt = (priceAtOrder - discountAmount) * el.quantity; // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
      // console.log('subtotalAmt',subTotalAmt)
      return {
        productId: product.id,
        quantity: el.quantity,
        priceAtOrder, // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏ì ‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        discountAtOrder, // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î ‡∏ì ‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        subTotalAmt,
        discount,
      }; 
    });  

    // 4Ô∏è‚É£ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì totalAmt ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏Ñ‡∏≤     
    const totalAmt1 = validatedItems.reduce((sum, item) => sum + item.subTotalAmt, 0);  

    if(totalAmt!==totalAmt1){
      throw new Error(`‚ùå ‡∏°‡∏∂‡∏á ‡πÅ‡∏≠‡∏ö‡πÇ‡∏Å‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡∏´‡∏ô‡∏¥ ‡∏•‡∏≠‡∏á Refresh ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÉ‡∏´‡∏°‡πà`)
    }

  
    // 5Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠     
    const order = await prisma.order.create({       
      data: {         
        userId,         
        payment_status: "Payment Online",         
        delivery_address: addressId,         
        totalAmt:totalAmt1,       
      },     
    });  

    // 6Ô∏è‚É£ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠     
    const productOnOrderData = validatedItems.map((el) => {
      const price = el.priceAtOrder;  // ‡πÉ‡∏ä‡πâ priceAtOrder ‡πÅ‡∏ó‡∏ô price
      return {
        orderId: order.id,
        productId: el.productId,
        quantity: el.quantity,
        priceAtOrder: el.priceAtOrder,
        discount:el.discount,  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏ì ‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        discountAtOrder: el.discountAtOrder,  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î ‡∏ì ‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        subTotalAmt: el.subTotalAmt,
        price,  // ‡πÄ‡∏û‡∏¥‡πà‡∏° price ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
      };
    }); 

    await prisma.productOnOrder.createMany({       
      data: productOnOrderData,     
    });  

    // 7Ô∏è‚É£ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•     
    await prisma.$transaction(       
      validatedItems.map((el) =>         
        prisma.product.update({           
          where: { id: el.productId },           
          data: {             
            stock: { decrement: el.quantity },             
            sold: { increment: el.quantity },           
          },         
        })       
      )     
    );           

    // 8Ô∏è‚É£ ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ     
    await prisma.cartProduct.deleteMany({ where: { userId } });  

    // 9Ô∏è‚É£ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ shopping_cart ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ     
    await prisma.user.update({       
      where: { id: userId },       
      data: { shopping_cart: { set: [] } },     
    });  

    return res.json({       
      message: "‚úÖ Order Successfully",       
      error: false,       
      success: true,       
      data: productOnOrderData,     
    });   
  } catch (error) {     
    console.error("‚ùå Error in paymentOrderController:", error);     
    return res.status(500).json({       
      message: error.message || error,       
      error: true,       
      success: false,     
    });   
  } 
};

export const payment = async (req, res) => {
  try {
    const { list_items } = req.body;

    // 1Ô∏è‚É£ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏≠‡∏°‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const productIds = list_items.map((item) => item.productId);
    const productsFromDB = await prisma.product.findMany({
      where: { id: { in: productIds } },
      select: { id: true, price: true, discount: true, stock: true },
    });

    // 2Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ productId ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const productMap = new Map(productsFromDB.map((p) => [p.id, p]));
    const validatedItems = list_items.map((el) => {
      const product = productMap.get(el.productId);
      if (!product) {
        throw new Error(`‚ùå Product not found: ${el.productId}`);
      }

      // 3Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
      if (product.stock < el.quantity) {
        throw new Error(`‚ùå Not enough stock for product: ${el.productId}`);
      }

      return {
        productId: product.id,
        quantity: el.quantity,
        price: product.price,
        discount: product.discount,
        subTotalAmt: (product.price - (product.price * (product.discount / 100))) * el.quantity,
      };
    });

    const totalAmt = validatedItems.reduce((sum, item) => sum + item.subTotalAmt, 0);

    const totalAmtRounded = Math.round(totalAmt * 100) / 100;  // ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ö‡∏≤‡∏ó

    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏ã‡∏ô‡∏ï‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ Stripe
    const amountInCents = Math.round(totalAmtRounded * 100);  // ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏ã‡∏ô‡∏ï‡πå

    const paymentIntent = await stripe.paymentIntents.create({
      amount: amountInCents,
      currency: "thb",
      automatic_payment_methods: {
        enabled: true,
      }
    })

    res.send({ clientSecret: paymentIntent.client_secret })

  } catch (error) {
    console.error("‚ùå Error in payment:", error);
    return res.status(500).json({
      message: error.message || error,
      error: true,
      success: false,
    });
  }
}

export const getOrderController = async (req, res) => {
  try {
    let { page = 1, limit = 10,sortDate = 'desc' } = req.body;
    const userId = req.user.id;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á skip ‡πÅ‡∏•‡∏∞ take ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏° page ‡πÅ‡∏•‡∏∞ limit
    const skip = (page - 1) * limit;
    const take = limit;

    // ‡πÉ‡∏ä‡πâ Promise.all ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    const [data, totalCount] = await Promise.all([
      prisma.order.findMany({
        where: { userId }, 
        orderBy: 
          { createdAt: sortDate },
        skip,  
        take, 
        include:{
          productOnOrder:{
            include:{
              product:{
                include:{image:true}
              },
            }
          }
        } 
      }),
      prisma.order.count({
        where: { userId }, 
      }),
    ]);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (data.length === 0) {
      return res.status(400).json({
        message: 'No orders found',
        error: true,
        success: false,
      });
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    return res.json({
      message: 'Get orders success',
      data,
      error: false,
      success: true,
      totalCount,
      totalNoPage: Math.ceil(totalCount / limit),  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    });
  } catch (error) {
    console.error("‚ùå Error in getOrderController:", error);
    return res.status(500).json({
      message: error.message || error,
      error: true,
      success: false,
    });
  }
};



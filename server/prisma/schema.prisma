generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id                     String    @id @default(uuid())
  name                   String
  email                  String    @unique
  password               String
  avatar                 String? // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô nullable
  avatarPublicId         String? // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö `public_id`
  mobile                 String? // ‡πÉ‡∏ä‡πâ BigInt ‡πÅ‡∏ó‡∏ô Number ‡πÉ‡∏ô Prisma
  refresh_token          String    @default("")
  verify_email           Boolean   @default(false)
  isVerified             Boolean   @default(false)
  last_login_date        DateTime?
  status                 Status    @default(ACTIVE)
  role                   Role      @default(USER)
  verify_email_otp       String?
  verify_email_expiry    DateTime?
  forgot_password_otp    String?
  forgot_password_expiry DateTime?

  address_details Address[]     @relation("UserAddresses")
  shopping_cart   CartProduct[] @relation("UserCart")
  orderHistory    Order[]       @relation("UserOrders")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id           String  @id @default(uuid())
  address_line String
  city         String
  state        String
  pincode      String
  country      String
  mobile       String
  status       Boolean @default(true)
  userId       String
  user         User    @relation("UserAddresses", fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

model CartProduct {
  id        String  @id @default(uuid())
  productId String
  quantity  Int     @default(1)
  total     Float?
  userId    String
  user      User    @relation("UserCart", fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id    String  @id @default(uuid())
  name  String
  image Image[]
  unit  String  @default("")
  stock Int?
  price Float?

  discount       Float?
  discount_show Float?
  
  discount_start DateTime? 
  discount_end   DateTime? 

  description  String  @default("")
  more_details Json    @default("{}")
  publish      Boolean @default(true)
  sold         Int?    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subcategories ProductSubCategory[]

  cartProducts CartProduct[]
  orders       ProductOnOrder[]

  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  @@index([name, description])
}

model ProductOnOrder {
  id          String @id @default(uuid())
  orderId     String
  productId   String // ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ñ‡∏∂‡∏á product ‡∏à‡∏≤‡∏Å Product
  quantity    Int
  price       Float // ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô Order (‡∏≠‡∏≤‡∏à‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥)
  discount    Float? // ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô Order
  subTotalAmt Float?

  priceAtOrder Float    // ‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏ì ‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
  discountAtOrder Float  // ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ ‡∏ì ‡∏ï‡∏≠‡∏ô‡∏ô‡∏±‡πâ‡∏ô

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Order {
  id               String  @id @default(uuid())
  userId           String
  paymentId        String?
  payment_status   String
  delivery_address String
  totalAmt         Float   @default(0)
  invoice_receipt  String?
  stripePaymentId  String?
  currency         String?

  user    User    @relation("UserOrders", fields: [userId], references: [id])
  address Address @relation(fields: [delivery_address], references: [id])

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  productOnOrder ProductOnOrder[]
}

model Image {
  id                   String @id @default(uuid())
  productimage         String // ‡πÄ‡∏Å‡πá‡∏ö URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  productimagePublicId String

  product   Product @relation(fields: [productId], references: [id])
  productId String // Foreign Key ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö Product

  createdAt DateTime @default(now())
}

model Category {
  id               String   @id @default(uuid())
  name             String   @default("")
  catimage         String   @default("")
  catimagePublicId String   @default("")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  productCategories Product[]
  subcategories     SubCategory[]
}

model SubCategory {
  id                  String   @id @default(uuid())
  name                String   @default("")
  subcatimage         String   @default("")
  subcatimagePublicId String   @default("")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  productSubcategories ProductSubCategory[]
  Category             Category?            @relation(fields: [categoryId], references: [id])
  categoryId           String?
}

model ProductSubCategory {
  id            String      @id @default(uuid()) // Explicit primary key
  product       Product     @relation(fields: [productId], references: [id])
  productId     String
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
  subCategoryId String

  @@unique([productId, subCategoryId]) // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏° unique constraint
}

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum Role {
  ADMIN
  USER
}
